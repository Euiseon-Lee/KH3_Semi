/*
    Css파일
    - 모듈화 시키고 싶은 디자인 코드를 이곳에 작성
*/

@charset "UTF-8";

*{
    box-sizing: border-box;  
}

/*
    컨테이너(container)
    - 특정 화면의 가장 바깥쪽 영역
    - 어떤 폭을 가지는 컨테이너를 사용할지 모르므로 대략적으로 미리 준비해둔다
    - 가운데 정렬이 이루어지도록 구현
    -100px 부터 50px 간격으로 1000px까지 준비
    -ex).container-w100이면 폭이 100px이면서 가운데 나오는 영역
*/

.container{
    margin: auto;
}

.w100{width: 100px;}
.w150{width: 150px;}
.w200{width: 200px;}
.w250{width: 250px;}
.w300{width: 300px;}
.w350{width: 350px;}
.w400{width: 400px;}
.w450{width: 450px;}
.w500{width: 500px;}
.w550{width: 550px;}
.w600{width: 600px;}
.w650{width: 650px;}
.w700{width: 700px;}
.w750{width: 750px;}
.w800{width: 800px;}
.w850{width: 850px;}
.w900{width: 900px;}
.w950{width: 950px;}
.w1000{width: 1000px;}


/*
    컨테이너 내부(줄 row) 디자인
    - 정렬을 선택할 수 있어야한다
    - 상하간격을 선택할 수 있어야한다.
*/

.row{
    margin:10px 0px;
    text-align:left;
}

.left{text-align: left;}
.center{text-align: center;}
.right{text-align: right;}

.m0{
    margin-top: 0px;
    margin-bottom: 0px;
}
.m10{
    margin-top: 10px;
    margin-bottom: 10px;
}
.m20{
    margin-top: 20px;
    margin-bottom: 20px;
}
.m30{
    margin-top: 30px;
    margin-bottom: 30px;
}
.m40{
    margin-top: 40px;
    margin-bottom: 40px;
}
.m50{
    margin-top: 50px;
    margin-bottom: 50px;
}


/* 모든 이미지에 대한 공용 스타일*/
.img{
    /* transparent는 투명한 색상을 의미*/
    border: 2px solid transparent;
}

/*img 와 img-border를 함께 가지고 있는 항목*/
.img.img-border{
    border: 2px solid gray;
}

.img.img-circle{ 
    border-radius: 50%;
}

.img.img-round{
    border-radius: 10px;
}

.img.img-blur{
    /*불투명도, 0부터 1사이로 설정(0-투명, 1 불투명)*/
    opacity: 0.4;
}

.img.img-hover{
    /* 마우스가 올라가면(호버링) 이미지가 선명해지도록 구현*/
    opacity: 0.4;
}
/*선택자 뒤에 :hover 가 붙으면 마우스가 올라간 경우의 디자인 구현*/
.img.img-hover:hover{
    opacity: 1;
}

.img.img-shadow{
    /*이미지에 그림자 부여 - box-shadow : x축이동정도 y축이동정도 번짐정도 확산정도 색상*/
    border:none;
    /*box-shadow: 3px 3px 3px 0 black;*/
    box-shadow: 0 0 5px 1px gray;
}

    /* a태그 디자인 (link)
        -버튼처럼 보이는 링크, a태그 기본디자인 밑줄 안나오게 설정*/
    .link{
        text-decoration: none;
        font-weight: bold;
        color: rgb(139, 140, 137);
    }
    .link:hover{
        color: rgb(96, 150, 186);
    }

    /*확장스타일 - 버튼모양의 링크*/
    .link.link-btn{
        border-radius: 0.25em;
        padding: 0.5em;
        display: inline-block;
        color: white;
        background-color: rgb(39, 76, 119);
    }
    .link.link-btn:hover{
        color: rgb(231, 236, 239);
    }

    /*헤더스타일 - 헤더 링크 Azure*/
    .link.link-header{
        position: absolute;
        top: 20px;
    }
    .link.link-header.link1{
        right: 340px;
     }
    
     .link.link-header.link2{
        right: 270px;
     }
    
     .link.link-header.link3{
        right: 200px;
     }

    /*footer스타일 - footer 링크 Azure*/
    .link.link-footer{
        position: absolute;
        font-size: 22px;
        color: rgb(139, 140, 137);
        text-align: right;
    }
    .link.link-footer:hover{
        border-bottom: 3px solid rgb(139, 140, 137);;

    }
    .footer-text{
        color: rgb(39, 76, 119);
        font-weight: bolder;
    }
    .footer-text-bottom{
        font-size: 14px;
        color: rgb(139, 140, 137);
    }
     
    /*
    pagenation 설정 Azure
    */
    .pagination {
        text-align: center;
        /* 이 설정을 하면 내부 항목의 줄바꿈이 일어나지 않는다 */
        white-space: nowrap;
        /* 영역을 넘어가는 내용에 대해 표시하지 않도록 설정한다 */
        overflow: hidden;            
    }
    .pagination > a {
        color: rgb(139, 140, 137);
        font-weight: bold;
        display: inline-block;
        min-width:2em;
        padding: 0.25em;
        text-align: center;
        border:1px solid transparent; /*테두리 투명색*/
    }
    .pagination > a:hover,
    .pagination > a.active {
        color: rgb(96, 150, 186);
        border:1px solid transparent; /*테두리 투명색*/
    }
    /*크기조절은 .pagenation의 글자크기로 조절*/
    .pagination{
        font-size: 15px;
    }
    /*입력창이 필요한 경우크게 두가지
    (1) 회원가입, 로그인 -> 세로배치
    - 입력창의 폭을 100%로 설정해야 한다
    - 확장스타일로 설정
    (2) 검색화면 -> 가로배치
    - 입력창의 폭은 설정할 필요가 없다
    - .form-input
    - 기본스타일로 설정
    */
    .form-input{
        /*outline 선택 시 자동으로 생기는 테두리*/
        outline: none;
        padding: 0.5em;
        background-color: rgb(231, 236, 239);
        border-color: transparent;
    }

    /*
    :focus는 해당 태그에 포커스가 맞춰진 경우
    = 입력창일 시 커서가 위치하면 포커스라고 봄
    */
    .form-input:focus{
        border-color: rgb(148, 168, 184);
        border-width: 0.1em;
    }

    .fill{
        width: 100%;
    }

        /*textarea 폭 조절 금지*/
        textarea.form-input{
        resize: vertical;
    }

    /*체크박스 : 체크가 된 경우와 안된 경우를 구분해서 스타일 부여*/
    /* 체크박스 바로 뒤(+) 에 있는 라벨의 스타일 정의*/
    input[type=checkbox]+label{
        color: rgb(139, 140, 137);
    }

    /*:checked는 체크가 된 상태를 선택하는 조건부 선택자*/
    input[type=checkbox]:checked+label{
        color:rgb(39, 76, 119)
    }

    /*모서리가 둥근 입력창*/
    .form-input.input-round{
        border-radius: 0.25em;
    }


    /*버튼 button 설정 -> 등록, 취소버튼말고는 되도록 안썼으면좋겠어요..!*/
    .btn{
        border-radius: 0.25em;
        border-color: transparent;
        padding:0.5em;

        color:  rgb(225, 229, 242);
       background-color: rgb(96, 150, 186);

       cursor: pointer;

       /* 어떤속성을 inherit로 설정하면 기본값이 아니라 외부의 항목을 그대로 상속받아 쓰겠다는 의미*/
       font:inherit;

    }

    .btn:hover{
        color: rgb(39, 76, 119);
        border-color: transparent;
    }

        .btn.btn-primary {
        border-color: #0984e3;
        background-color: #0984e3;
        color:white;
    }
    .btn.btn-primary:hover {
        border-color: #0769b5;
        background-color:#0769b5;
    }

    .btn.btn-secondary {
        border-color: #636e72;
        background-color: #636e72;
        color: white;
    }
    .btn.btn-secondary:hover {
        border-color: #4f585b;
        background-color: #4f585b;
    }

    .btn.btn-success{
        border-color:#00b894;
        background-color:#00b894;
        color:white;

    }
    .btn.btn-success:hover{
        border-color:#009376;
        background-color:#009376;
    }

    .btn.btn-warning{
        border-color:#fdcb6e;
        background-color:#fdcb6e;
        color:white;
    }
    .btn.btn-warning:hover{
        border-color:#fcb126;
        background-color:#fcb126;
    }

    .btn.btn-danger{
        border-color:#d63031;
        background-color:#d63031;
        color:white;

    }
    .btn.btn-danger:hover{
        border-color:#ae2223;
        background-color:#ae2223;
    }

     /*
        테이블 디자인
        - 테이블에만 클래스를 붙여서 사용 
        -table
            -thead
                -tr
                    -th/td
            -tbody
                -tr
                    -th/td
            -tfoot
                -tr
                    -th/td

        th/td를 선택하는 방법
        1. thead, tbody, tfoot을 각각 처리하는 방법
            -.table>thead>tr>td
            - 총 6개의 선택자를 만들어야한다

        2. 모두 한번에 선택하는 방법
            -.table td
            - 테이블 안에 있는 테이블의 td에도 영향을 미친다
        */

        .table{
            width:100%;
            /*테두리 병합설정*/
            border-collapse: collapse;
        }

        .table>thead>tr>th,
        .table>thead>tr>td,
        .table>tbody>tr>th,
        .table>tbody>tr>td,
        .table>tfoot>tr>th,
        .table>tfoot>tr>td
        {
            text-align: center;
            padding: 0.5em;
        }

       /*
        확장 스타일
        1. 테두리가 있는 테이블 -.table-border
        2. 줄무늬 테이블    -.table-stripe
        3. 마우스를 감지하는 테이블 -.table-hover
        */
		.table.table-underline{
            border: 1px solid rgb(139, 140, 137);
            border-left: none;
            border-right:none;
        }
        
        .table.table-border{ /*1번 스타일*/
            border: 1px solid rgb(139, 140, 137);
        }

        .table.table-border>thead>tr>th,
        .table.table-border>thead>tr>td,
        .table.table-border>tbody>tr>th,
        .table.table-border>tbody>tr>td,
        .table.table-border>tfoot>tr>th,
        .table.table-border>tfoot>tr>td
        {
            border: 1px solid rgb(139, 140, 137);
        }


        .table.table-stripe>thead>tr,
        .table.table-stripe>tfoot>tr{ /*2번 스타일*/
        /*제목 배경색상 칠해줌*/
            background-color: rgb(231, 236, 239);
        }

        /*두줄에 한번씩 배경색상 칠해줌
        nth-child(2n) 이라고 하면 패턴이 정해짐 
        */
        .table.table.table-stripe>tbody>tr:nth-child(2n){
            background-color: rgb(231, 236, 239);
        }


        .table.table-hover>thead>tr,
        .table.table-hover>tfoot>tr{ /*3번 스타일*/
        /*제목은 배경색상 칠해줌*/
            background-color: rgb(231, 236, 239);
        }

        .table.table-hover>thead>tr:hover,
        .table.table-hover>tbody>tr:hover,
        .table.table-hover>tfoot>tr:hover{
            background-color: rgb(231, 236, 239);
        }


        /* 다단 레이아웃(2단 이상의 가로배치) 구현하기
        - 지금까지 구현했던 화면들은 한 줄에 1개만 나오는 경우
        - Css 가로배치 구현방법 3가지
        (1) float
        (2) flexbox layout
        (3) gird layout

        -> inline이 안되는 이유 : inline 속성은 기본 간격이 존재한다. 
        -> folat : left는 띄워서 왼쪽으로 붙이라는 뜻
                float로 설정한 항목은 기존 배치와 조화를 이루지 못한다 
                -> 이를 해결하기 위해서는 반드시 clear속성을 가진 영역이 필요함
                -> 즉 주어진 영역에서만 float를 쓰도록 class를 하나 만든다

        */

        .float-container{}

        .float-container>.float-left{
            float: left;
        }

        .float-container>.float-right{
            float: right;
        }

        /* 가상 선택자
        -존재하지 않는 영역을 선택하는 선택자
        -대표적으로 시작지점(::before)과 종료지점(::after)등을 사용할 수 있다
        -애초에 존재하지 않는 공간이므로 존재하도록 만드는 후처리가 필요하다
        -content를 이용해서 글자를 입력해주고 display를 이용하여 배치기준을 정해준다
        */
        .float-container::after{
            content:"";
            display: block;
            clear: both;
        }

        /*1단부터 5단까지 클래스를 이용해서 폭을 설정하도록 구현*/
        .layer-1{
            width: 100%;
        }
        .layer-2{
            width: 50%;
        }
        .layer-3{
            width: 33.3333%;
        }
        .layer-4{
            width: 25%;
        }
        .layer-5{
            width: 20%;
        }
        
        .fullscreen{
            position: fixed;
            top:0;
            left: 0;
            right: 0;
            bottom: 0;
            /*배경색에 투명도를 조절하여 구현*/
            background-color: rgba(0, 0, 0, 0.3);

            /*태그를 표시하지 않을경우*/
            display: none;
        }

        .fullscreen.active{
            display: block;
        }
        
        .fullscreen>.center-position{
            position: absolute;
            top: 50%;
            left: 50%;

            /*1번 방식 모든 브라우저에서 되지만 폭을 알아야함
            margin-left: -100px;
            */

            /*1번 방식 모든 브라우저에서 되지는 않지만 폭을 몰라도됨
                transform은 회전,기울이기, 확대/축소, 이동 등을 제어할 수 있는 속성
            */
            transform: translate(-50%,-50%);
        }

        /*메뉴 디자인 계획
        (1) list태그에는 디자인에 어울리지 않는 기호가 있으므로 제거한다.
                - ul.menu>li>ul : 2차메뉴의 ul만 선택
                - ul.menu ul : 하위 전부 다 선택(2,3,4,5차..)

        (2) ul에 설정된 기본 여백을 제거한다.
        (3) 1차 메뉴를 가로로 배치한다.
                - ul.menu>li
        (4) 1차 메뉴들의 간격을 설정한다. 
        (5) 처음엔 메뉴만 보이게 하고 항목은 숨겨야 한다.
        (6) 메뉴 항목에 마우스가 올라가면 숨겨진 메뉴를 보여준다
                -ul.menu li:hover>ul
        (7) 
        2차 메뉴 이상 위치를 절대 배치로 변경한다.
        모든 메뉴 항목 위치 배치를 연관배치(relative) 로 변경한다
        (8) 하위 메뉴들과 상위 메뉴가 같은 폭을 가지도록 처리한다
        (9) 색상, padding 등을 설정해준다
        (10) a태그를 li에 가득 채우도록 변경한다
        (11) 좌측에 배치될 메뉴와 우측에 배치될 메뉴를 구분한다
            -좌측 : 표시하지 않는 경우 기본값으로 설정
            -우측 : right menu
        (12) 3차 이상의 메뉴들은 우측에 나오도록 설정한다.
        (13) 우측 메뉴들은 3차 이상의 하위메뉴가 좌측에 나오도록 구현
        */
        

        ul.menu,
        ul.menu ul
        {
            list-style: none; /* (1) */

            /* (2) */
            padding: 0;
            margin: 0;
        }

        /*(3) ul의 마지막에는 clear를 해주고 li는 float로 배치*/
        ul.menu::after{
            content: "";
            display: block;
            clear: both;
        }
    
        ul.menu>li{
            width: 100px; /*(4)*/
            float: left;
        }

        /*(5) 2차이상의 메뉴를 숨긴다*/
        ul.menu ul{
            display: none;
        }
        /*(6)*/
        ul.menu>li:hover>ul{
            display: block;
        }
        /*(7)*/
        ul.menu ul{
        position: absolute;
        top:100%;
        left:0%;
        }
        ul.menu li{
            position:relative;
        }
        /*(8)*/
        ul.menu ul{
            width: 100%;
        }

        /*(9)*/
        ul.menu{
            font-style: 16px;
        }
        ul.menu, ul.menu ul{
            background-color: rgb(39, 76, 119);
        }
        ul.menu li{
            padding: 1em;
            text-align: center;
        }
        ul.menu a{
            text-decoration: none;
            font-weight: bold;
            color: white;
        }

        ul.menu a:hover{
            text-decoration: none;
            font-weight: bold;
            color: rgb(125, 125, 125);
        }

        ul.menu li:hover{
            background-color:rgb(231, 236, 239);
        }

        /*(10)*/
        ul.menu a{
            display: block;
            width: 100%;
        }

        /*(11)*/
        ul.menu>li.right-menu{
            float: right;
        }

        /*(12) 3차메뉴 이상을 선택*/
        ul.menu > li > ul ul{
            left: 100%;
            top: 0%;
        }

        /*(13) 우측메뉴 3차 이상 선택*/
        ul.menu > li.rightmenu >ul ul{
            left: -100%;

        }

        /*(14)*/
        ul.menu a{
        overflow: visible;
        white-space: nowrap;
        text-overflow: ellipsis;
        }

        /*
        flexbox를 이용한 배치
        -float의 단점을 보완한 기술
        -아주 오래된 브라우저는 지원하지 않는다
        -영역을 만들고 display:flex 를 설정하면 내부 배치 방식이 바뀐다
        -모든 설정을 개별 항목이 아니라 영역에 설정하여 배치 방식 결정 
        -flex는 가운데 정렬을 자체적인 옵션으로 지원한다. 

        -flex-direction: 배치방식 설정(row/row-reverse/column/column-reverse)
        -flex-wrap : 줄바꿈 허용/불가 설정 
        -flex-grow : 개별 영역이 차지할 자리 비율 설정 
        */

       .flex-container{
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
      }

      /*확장 스타일 : 세로배치*/
      .flex-container.flex-vertical{
        flex-direction: column;
      }

      /*felx를 이용하면 가운데 배치를 쉽게 할 수 있다.*/
      .display-center{
        display: flex;
        justify-content: center; /*display가 flex인 경우 가로정렬옵션*/
        align-items: center;   /*display가 flex인 경우 세로정렬옵션*/
      }

      .content-wrapper{
        flex-grow: 1; /*나머지 전부 차지한다라는 의미*/
       }

      /*메인 swiper class (메인페이지 swiper 크기입니다. 클래스 추가하여 사용하세요)*/
      .swiper{
        width: 100%;
        height: 500px;
      }

      .swiper-pagination-bullet-active { /*swiper 토글 색상 white로 변경*/
        background: white;
    }